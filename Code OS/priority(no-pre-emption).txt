(priority_no_preemption)

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Process {
    int id;
    int burst_time;
    int arrival_time;
    int priority;
    int start_time;
    int end_time;
};

bool compare_arrival_time(Process p1, Process p2) {
    return p1.arrival_time < p2.arrival_time;
}

bool compare_priority(Process p1, Process p2) {
    return p1.priority > p2.priority;
}

void calculate_priority_no_preemption(vector<Process>& processes) {
    int n = processes.size();
    int current_time = 0;
    int total_wait_time = 0;
    int total_turnaround_time = 0;

    sort(processes.begin(), processes.end(), compare_arrival_time);

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        processes[i].start_time = max(current_time, processes[i].arrival_time);
        processes[i].end_time = processes[i].start_time + processes[i].burst_time;
        total_turnaround_time += processes[i].end_time - processes[i].arrival_time;
        total_wait_time += processes[i].start_time - processes[i].arrival_time;
        current_time = processes[i].end_time;
    }

    double avg_wait_time = (double)total_wait_time / n;
    double avg_turnaround_time = (double)total_turnaround_time / n;

    cout << "Priority without preemption:" << endl;
    cout << "Average waiting time = " << avg_wait_time << endl;
    cout << "Average turnaround time = " << avg_turnaround_time << endl;
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    vector<Process> processes(n);

    for (int i = 0; i < n; i++) {
        cout << "Enter the burst time, arrival time, and priority of process " << i + 1 << ": ";
        cin >> processes[i].burst_time >> processes[i].arrival_time >> processes[i].priority;
    }

    sort(processes.begin(), processes.end(), compare_priority);

    calculate_priority_no_preemption(processes);

    return 0;
}
